---
formats: 
pdf:
title: "Differential Water Loss from Adaxial and Abaxial Petal Surfaces Suggests an Adaptive Role for Nyctinastic Movements in *Eschscholzia californica*"
author:  Kevin Simonin, Alyssa Miller, Annie Dang, Julia Rolls, Cameron Miller, Sean Britain, Kanchan Gautam, Griffin Wetzel, Lucy Gworek, Nicholas Rackard-Hilt and Gretchen LeBuhn

editor: visual
bibliography: references.bib
---

***This document includes the statistical analyses for the Simonin et al paper .***

All statistical analyses were done using RStudio.

**Results**

***Ovary and flower temperature***

Ovary and petal surface temperatures when the flower was closed were not significantly lower than ambient temperature.

NB:Data were collected from two flowers for 24 hours. Thermocouples 1 and 4 were inserted in the ovary. Thermocouples 2 and 5 were suspended in the bowl. Thermocouple 3 was in open air.

```{r}

# Adding libraries and entering data

# Import required R packages.

#library("googlesheets4")
library(reshape2)
library(dplyr)
library(broom)
library(ggplot2)
library(nlme)
library(lubridate) # for working with dates
library(scales)   # to access breaks/formatting functions
library(gridExtra) # for arranging plots
library(tidyr) # for reshaping data
library(stringr)
library(car)
library(FSA)
library(knitr)
library(flextable)  # Optional for better table formatting


#read in data and classify date variable
ov_temp = read.csv("~/GitHub/CApoppy/data/raw/fl_temp/cr6_Temp.28.May.22.csv", header = T, stringsAsFactors=FALSE)
ov_temp2 = read.csv("~/GitHub/CApoppy/data/raw/fl_temp/cr6_Temp.31.May.22.csv", header = T, stringsAsFactors=FALSE)

ov_temp$DateTime<- as.POSIXct(ov_temp$TIMESTAMP, format="%m/%d/%y %H:%M", tz = "UTC")
ov_temp2$DateTime<- as.POSIXct(ov_temp2$TIMESTAMP, format="%m/%d/%y %H:%M", tz = "UTC")


#Subset the data set to isolate the second day for the first flower
ov_temp3 <- subset(ov_temp2, RECORD > 328 & RECORD < 624) 
ov_temp4 <-subset(ov_temp2, RECORD > 391 )



```

Petal temperature analysis

```{r}
#| label: Petal_temp_analysis
#| echo: false
#| warning: false
#| 
# Create a named vector to map column names to readable labels
sensor_names <- c(
  "Temp_C_Avg.1." = "Ovary 1",
  "Temp_C_Avg.2." = "Bowl 1",
  "Temp_C_Avg.3." = "Ambient",
  "Temp_C_Avg.4." = "Ovary 2",
  "Temp_C_Avg.5." = "Bowl 2"
)

# Modify your gather and rename in one step
df3 <- ov_temp3 %>%
  select(DateTime, Temp_C_Avg.1., Temp_C_Avg.2., Temp_C_Avg.3., Temp_C_Avg.4., Temp_C_Avg.5.) %>%
  gather(key = "sensor", value = "value", -DateTime) %>%
  mutate(sensor = sensor_names[sensor])  # Replace sensor names with readable labels


# Create the plot
AllTemp3 <- ggplot(df3, aes(DateTime, value)) +
  geom_line(aes(colour=sensor, group=sensor), size=1) + # Line size adjusted for clarity
  geom_point(aes(colour=sensor), size=2) + # Increased point size for visibility
  scale_colour_manual(values = c("Ovary 1" = "green", "Bowl 1" = "orange", "Ambient" = "blue", 
                                "Ovary 2" = "darkgreen", "Bowl 2" = "darkorange")) + 
  ggtitle("Figure X. Flower and ovary temperatures of two flowers") +
  xlab("Date") + 
  ylab("Temperature (°C)") +
  theme_minimal() + # Clean theme 
  theme(
    plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 12, face = "bold"),
    axis.text = element_text(size = 10),
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10)
  ) +
  scale_x_datetime(date_labels = "%b %d", date_breaks = "1 week") # Adjusted for readability

print(AllTemp3)

# Export the plot
ggsave("~/GitHub/CApoppy/plots/flower_ovary_temperatures.png", plot = AllTemp3, width = 8, height = 6, dpi = 300) 




```

The second graph isolates the first flower where data was recorded continuously for 48 hours. Thermocouple 1 is in the ovary, Thermocouple 2 is touching the surface of an inner flower petal. Thermocouple 3 was in open air.

There was no significant difference in the ovary temperatures at night between the petal surface, ovary and air temperature.

```{r}
#| echo: false
#| warning: false

# Second day of blooming 
df4 <- ov_temp4 %>%
  select(DateTime,  Temp_C_Avg.1., Temp_C_Avg.2., Temp_C_Avg.3. ) %>%
  gather(key = "sensor", value = "value", -DateTime)


AllTemp4 <- ggplot(df4, aes(DateTime, value)) +
           geom_line(aes(colour=sensor, group=sensor)) + # colour, group both depend on variable
           geom_point(aes(colour=sensor),                # colour depends on variable
               size=1)+
         ggtitle("Figure 2. Flower and ovary temperature - one flower ovary and bowl") +
         xlab("Date") + ylab("Temperature (C)")

#render plot

AllTemp4
```

These data track temperatures from themocouples inserted into a flower that was closed and one that was open. This represents two nights on the first night, we held on flower open using wire.

```{r}
#| echo: false
#| warning: false

# First graph remains the same
df1 <- ov_temp %>%
  select(DateTime, Temp_C_Avg.3., Temp_C_Avg.4., Temp_C_Avg.5.) %>%
  gather(key = "variable", value = "value", -DateTime)
head(df1, 3)

AllTemp1 <- ggplot(df1, aes(DateTime, value)) +
           geom_line(aes(colour=variable, group=variable)) +
           geom_point(aes(colour=variable), size=1) +
           ggtitle("Temp every 5 min May 27-28, 2022") +
           xlab("Date") + ylab("Air Temperature (C)")

# Second graph with renamed variables
df2 <- ov_temp %>%
  select(DateTime, Temp_C_Avg.3., Temp_C_Avg.1., Temp_C_Avg.2.) %>%
  # Rename columns before gathering
  rename("ambient" = Temp_C_Avg.3.,
         "close" = Temp_C_Avg.1.,
         "open" = Temp_C_Avg.2.) %>%
  gather(key = "variable", value = "value", -DateTime)

head(df2, 3)

AllTemp2 <- ggplot(df2, aes(DateTime, value)) +
           geom_line(aes(colour=variable, group=variable)) +
           geom_point(aes(colour=variable), size=1) +
           ggtitle("Temperature Measurements May 27-28, 2022") +
           xlab("Date") + ylab("Air Temperature (C)") +
           # Add nicer theme and better legend title
           theme_minimal() +
           labs(colour = "Measurement Location") +
           # Improve text readability
           theme(text = element_text(size = 12),
                 plot.title = element_text(size = 14, face = "bold"))

# Render plots
AllTemp1
AllTemp2

# Save the second plot (with renamed variables) as a high-resolution PNG
# You can also save in other formats: pdf, jpeg, tiff, svg, etc.
ggsave("temperature_plot.png", plot = AllTemp2, width = 10, height = 6, dpi = 300)


```

***Daytime Petal Water Content***

```{r}
#| label: Petal_water_analysis
#| warning: false
#| include: false


# Define paths to data sets. If you don't keep your data in the same directory as the code, adapt the path names.

setwd("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/CApoppy/data")

#data <- read_sheet("https://docs.google.com/spreadsheets/d/1E-IBa1wWjJXVLBjhe6bojlOcMyZRfDINiFydXIVs17s/edit#gid=0")
data <- read.csv("Petal_water.csv", header=TRUE, stringsAsFactors=TRUE)

data<-data[-c(1,2,3,4),]

data$Time_cat <- as.factor(data$Time_cat)
#remove outlier
data <- data[-c(76),]
data <- data[-c(79),]
```

Total water content of petals is highest before opening in the morning (06:00), declines from the time of opening (9:00) to time of closing (15:00). Upon closing (15:00) water content stabilizes and begins to increase.

```{r}
#| echo: false
#| warning: false


# plot  water content per unit surface area

plot1<- ggplot(data, aes(group = Time_cat, y = water_cm2, fill = Time_cat)) + 
  stat_boxplot(geom = "errorbar",
               width = 0.75) + 
  geom_boxplot() +
        ggtitle("Figure 3. Water content per unit surface area (cm2) of petals at different times of day") +
        xlab("Time collected") + ylab("Water content (cm2)") +
        theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

plot1

# Check assumptions
shapiro.test(data$water_cm2)  # Test for normality
leveneTest(water_cm2 ~ Time_cat, data = data)  # Test for homogeneity of variances (from car package)

kruskal_test_cm <- kruskal.test(water_cm2 ~ Time_cat, data = data)
print(kruskal_test_cm)

# Convert Kruskal-Wallis results to a data frame
kruskal_results_cm <- data.frame(
  Statistic = kruskal_test_cm$statistic,
  DF = kruskal_test_cm$parameter,
  P_Value = kruskal_test_cm$p.value
)

# Create a well-formatted table that can be easily copied to documents
kruskal_table_cm <- flextable(kruskal_results_cm) %>%
  set_caption("Table 1: Kruskal-Wallis Test Results-Water per unit area") %>%
  theme_vanilla() %>%     # Clean formatting that works well in most documents
  autofit() %>%           # Automatically adjust column widths
  bold(part = "header") %>%
  fontsize(size = 11) %>% # Standard size for better readability
  border_outer() %>%      # Add clear borders
  align(align = "center", part = "all") # Center alignment for clean appearance

# Display the table in R for easy copy-paste
kruskal_table_cm

# Pairwise comparisons (Dunn’s test)

dunn_test <- dunnTest(water_cm2 ~ Time_cat, data = data, method = "bonferroni")
print(dunn_test)


# Convert results to a data frame
dunn_results <- as.data.frame(dunn_test$res)

# Rename columns for readability
colnames(dunn_results) <- c("Comparison", "Z Score", "Unadjusted P", "Adjusted P")

# Export results as a table using knitr::kable()
#kable(dunn_results, caption = "Table 1: Dunn’s Test Pairwise Comparisons")

# Create a styled flextable
dunn_table <- flextable(dunn_results) %>%
  set_caption("Table 1: Dunn's Test Pairwise Comparisons ") %>%
  theme_vanilla() %>%  # Apply a clean theme
  autofit() %>%        # Optimize column widths
  bold(part = "header") %>%  # Bold the header
  fontsize(size = 10, part = "all")  # Set consistent font size

# Save as PNG using flextable's save_as_image function
save_as_image(dunn_table, path = "~/GitHub/CApoppy/figures/dunn_test_results.png", zoom = 2)




#p.adj → Adjusted p-value (Bonferroni or other method, used to control for Type I error).
```

Water content per unit surface area is highest before the flower opens (06:00), drops as soon as the flower has opened (09:00) and remains lower while the petals are open and then increases when the flower closes (15:00)

```{r}
#| echo: false
#| warning: false


# plot total water content

plot2<- ggplot(data, aes(group = Time_cat, y = water_mg, fill = Time_cat)) + 
  stat_boxplot(geom = "errorbar",
               width = 0.75) + 
  geom_boxplot() +
        ggtitle("Figure 3. Total water content (mg) of petals at different times of day") +
        xlab("Time collected") + ylab("Water (mg)") +
        theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

plot2

# Check assumptions
shapiro.test(data$water_mg)  # Test for normality
leveneTest(water_mg ~ Time_cat, data = data)  # Test for homogeneity of variances (from car package)

kruskal_test_mg <- kruskal.test(water_mg ~ Time_cat, data = data)
print(kruskal_test_mg)

# Convert Kruskal-Wallis results to a data frame
kruskal_results_mg <- data.frame(
  Statistic = kruskal_test_mg$statistic,
  DF = kruskal_test_mg$parameter,
  P_Value = kruskal_test_mg$p.value
)

# Create a well-formatted table that can be easily copied to documents
kruskal_table_mg <- flextable(kruskal_results_mg) %>%
  set_caption("Table 1: Kruskal-Wallis Test Results- Total water content") %>%
  theme_vanilla() %>%     # Clean formatting that works well in most documents
  autofit() %>%           # Automatically adjust column widths
  bold(part = "header") %>%
  fontsize(size = 11) %>% # Standard size for better readability
  border_outer() %>%      # Add clear borders
  align(align = "center", part = "all") # Center alignment for clean appearance

# Display the table in R for easy copy-paste
kruskal_table_mg

# Pairwise comparisons (Dunn’s test)

dunn_test_mg <- dunnTest(water_mg ~ Time_cat, data = data, method = "bonferroni")
print(dunn_test_mg)


# Convert results to a data frame
dunn_results_mg <- as.data.frame(dunn_test$res)

# Rename columns for readability
colnames(dunn_results_mg) <- c("Comparison", "Z Score", "Unadjusted P", "Adjusted P")

# Export results as a table using knitr::kable()
#kable(dunn_results, caption = "Table 1: Dunn’s Test Pairwise Comparisons")

# Create a styled flextable
dunn_table_mg <- flextable(dunn_results_mg) %>%
  set_caption("Table 1: Dunn's Test Pairwise Comparisons") %>%
  theme_vanilla() %>%  # Apply a clean theme
  autofit() %>%        # Optimize column widths
  bold(part = "header") %>%  # Bold the header
  fontsize(size = 10, part = "all")  # Set consistent font size

# Save as PNG using flextable's save_as_image function
save_as_image(dunn_table_mg, path = "~/GitHub/CApoppy/figures/dunn_test_results_mg.png", zoom = 2)




#p.adj → Adjusted p-value (Bonferroni or other method, used to control for Type I error).
```

Upon opening (06:00) and when petals close (15:00) , petal water content per unit area is higher.

\*\* References\*\*

::: {#refs}
:::
