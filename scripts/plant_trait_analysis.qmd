---
title: "Comparison of Plant Populations: Pt_Conception vs CojoHQ"
author: "Gretchen LeBuhn"
date: "2025-03-18"
format: 
  html:
    toc: true
    code-fold: show
    theme: cosmo
    fig-width: 10
    fig-height: 6
---

```{r setup, include=FALSE}
# Set global options for code chunks
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)

# Load required packages
library(tidyverse)  # For data manipulation and visualization
library(car)        # For Levene's test
library(ggplot2)    # For creating plots
library(knitr)      # For nice tables
library(kableExtra) # For enhanced tables
library(broom)      # For tidying statistical outputs
library(gridExtra)  # For arranging multiple plots
```

## Introduction

This analysis compares two plant populationson 18 March 2025  (Pt_Conception and CojoHQ) across multiple plant traits including:

- Number of leaves
- Number of flowers
- Number of buds
- Number of fruits
- Leaf length
- Flower length
- Fruit length

We will conduct appropriate statistical tests to compare these traits between the two populations.

## Data Import and Preparation

First, let's import the data and prepare it for analysis:

```{r import-data}
# Create the dataset using the provided data
plant_data <- data.frame(
  Date = rep("18-Mar-25", 30),
  Population = c(rep("Pt_Conception", 15), rep("CojoHQ", 15)),
  Individual = c(1:15, 1:15),
  Leaves = c(8, 18, 14, 8, 15, 8, 17, 53, 4, 28, 20, 14, 7, 11, 20, 
             12, 37, 22, 11, 10, 32, 38, 11, 49, 34, 26, 52, 7, 10, 13),
  Flowers = c(0, 0, 2, 1, 1, 1, 1, 2, 1, 2, 0, 0, 0, 0, 0, 
              0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1),
  Buds = c(2, 0, 1, 1, 0, 0, 0, 1, 2, 1, 2, 0, 0, 0, 0, 
           1, 3, 2, 0, 1, 1, 4, 1, 6, 5, 2, 6, 0, 1, 1),
  Fruit = c(1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
            0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0),
  leaf_length = c(60.1, 116.4, 168.9, 93.2, 54.1, 46.6, 76.8, 170, 86.2, 192.6, 
                  136.3, 99.3, 50.8, 43.2, 55.4, 41.3, 129, 99.9, 75.8, 44.5, 
                  78.4, 203.6, 100.3, 180.6, 102.8, 88.2, 174.8, 32.3, 85.5, 58.1),
  flower_length = c(NA, NA, 28, 29.7, 32.7, 26, 25.4, 27.9, 24.6, 31.8, 
                    47.4, NA, NA, NA, NA, NA, 32.8, NA, NA, 47.7, 
                    NA, 45.7, NA, 44, 32.9, 32.7, 56.8, 27.9, NA, 23.7),
  fruit_length = c(NA, NA, 36.5, NA, NA, NA, NA, 38.1, NA, NA, 
                   NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
                   NA, NA, NA, NA, NA, 62.6, NA, 33.2, NA, NA)
)

# Convert Population to a factor for proper statistical analysis
plant_data$Population <- as.factor(plant_data$Population)

# Display the first few rows of the dataset
head(plant_data) %>%
  kable() %>%
  kable_styling(bootstrap_options = c("striped", "hover"))

# Get a summary of the data to check for any issues
summary(plant_data)
```

## Data Visualization

Before conducting statistical tests, let's visualize the data to get a better understanding of the differences between populations:

```{r data-visualization, fig.height=10, fig.width=12}
# Create a function to generate boxplots for numeric variables
create_boxplot <- function(data, var_name, y_label) {
  ggplot(data, aes(x = Population, y = .data[[var_name]], fill = Population)) +
    geom_boxplot(alpha = 0.7) +
    geom_jitter(width = 0.2, alpha = 0.5) +
    labs(title = paste("Comparison of", y_label, "between Populations"),
         y = y_label,
         x = "Population") +
    theme_minimal() +
    scale_fill_brewer(palette = "Set2")
}

# Create boxplots for each continuous variable
p1 <- create_boxplot(plant_data, "Leaves", "Number of Leaves")
p2 <- create_boxplot(plant_data, "Flowers", "Number of Flowers")
p3 <- create_boxplot(plant_data, "Buds", "Number of Buds")
p4 <- create_boxplot(plant_data, "Fruit", "Number of Fruits")
p5 <- create_boxplot(plant_data, "leaf_length", "Leaf Length")

# For flower_length and fruit_length, we need to handle NA values
p6 <- create_boxplot(filter(plant_data, !is.na(flower_length)), "flower_length", "Flower Length")
p7 <- create_boxplot(filter(plant_data, !is.na(fruit_length)), "fruit_length", "Fruit Length")

# Arrange plots in a grid
gridExtra::grid.arrange(p1, p2, p3, p4, p5, p6, p7, ncol = 2)
```

## Statistical Analysis

We need to select appropriate statistical tests for comparing the populations. For each trait, we'll follow these steps:

1. Check for normality using the Shapiro-Wilk test
2. Check for equal variances using Levene's test
3. Based on the results, use either parametric (t-test) or non-parametric (Wilcoxon rank-sum test) methods

### Helper Functions for Statistical Analysis

```{r helper-functions}
# Function to perform complete statistical comparison for a given variable
compare_variable <- function(data, var_name, var_label) {
  # Filter out NA values
  data_filtered <- data[!is.na(data[[var_name]]), ]
  
  # Get data for each population
  pop1_data <- data_filtered[data_filtered$Population == "Pt_Conception", var_name]
  pop2_data <- data_filtered[data_filtered$Population == "CojoHQ", var_name]
  
  # Create a standard output structure regardless of analysis path
  result <- data.frame(
    Variable = var_label,
    Mean_Pt_Conception = ifelse(length(pop1_data) > 0, round(mean(pop1_data, na.rm = TRUE), 2), NA),
    SD_Pt_Conception = ifelse(length(pop1_data) > 1, round(sd(pop1_data, na.rm = TRUE), 2), NA),
    Mean_CojoHQ = ifelse(length(pop2_data) > 0, round(mean(pop2_data, na.rm = TRUE), 2), NA),
    SD_CojoHQ = ifelse(length(pop2_data) > 1, round(sd(pop2_data, na.rm = TRUE), 2), NA),
    SampleSize_Pt_Conception = length(pop1_data),
    SampleSize_CojoHQ = length(pop2_data),
    Test = "Not performed",
    Normality = "Unknown",
    EqualVariances = "Unknown",
    p_value = NA,
    Significant = "No",
    Interpretation = "Analysis not possible"
  )
  
  # Skip if not enough data
  if(length(pop1_data) < 3 || length(pop2_data) < 3) {
    result$Test <- "Insufficient data"
    result$Interpretation <- "Cannot compare due to insufficient data"
    return(result)
  }
  
  # Try to run statistical tests within a tryCatch block to prevent errors
  tryCatch({
    # Check for normality
    shapiro_p1 <- shapiro.test(pop1_data)$p.value
    shapiro_p2 <- shapiro.test(pop2_data)$p.value
    normal_dist <- shapiro_p1 > 0.05 & shapiro_p2 > 0.05
    result$Normality <- if(normal_dist) "Normal" else "Non-normal"
    
    # Check for equal variances using Levene's test
    levene_result <- car::leveneTest(data_filtered[[var_name]] ~ data_filtered$Population)
    equal_var <- levene_result$`Pr(>F)`[1] > 0.05
    result$EqualVariances <- if(equal_var) "Equal" else "Unequal"
    
    # Choose appropriate test
    if(normal_dist) {
      if(equal_var) {
        # Use t-test with equal variances
        test_result <- t.test(pop1_data, pop2_data, var.equal = TRUE)
        result$Test <- "Two-sample t-test (equal variances)"
      } else {
        # Use Welch's t-test (unequal variances)
        test_result <- t.test(pop1_data, pop2_data, var.equal = FALSE)
        result$Test <- "Welch's t-test (unequal variances)"
      }
    } else {
      # Use Wilcoxon rank-sum test (non-parametric) with exact=FALSE to handle ties
      test_result <- wilcox.test(pop1_data, pop2_data, exact = FALSE)
      result$Test <- "Wilcoxon rank-sum test (non-parametric)"
    }
    
    # Record p-value
    result$p_value <- round(test_result$p.value, 4)
    
    # Determine if result is significant
    is_significant <- test_result$p.value < 0.05
    result$Significant <- if(is_significant) "Yes" else "No"
    
    # Create interpretation text
    if(is_significant) {
      if(mean(pop1_data, na.rm = TRUE) > mean(pop2_data, na.rm = TRUE)) {
        result$Interpretation <- paste0("Pt_Conception has significantly higher ", var_label, " than CojoHQ")
      } else {
        result$Interpretation <- paste0("CojoHQ has significantly higher ", var_label, " than Pt_Conception")
      }
    } else {
      result$Interpretation <- paste0("No significant difference in ", var_label, " between populations")
    }
  }, 
  error = function(e) {
    # In case of error, return basic statistics but note the error
    result$Test <- paste("Error in analysis:", e$message)
    result$Interpretation <- "Statistical comparison could not be completed"
  })
  
  return(result)
}
```

### Perform Comparisons for All Variables

Now let's apply our comparison function to all variables of interest:

```{r perform-comparisons}
# List of variables to compare and their labels
variables <- list(
  list(name = "Leaves", label = "Number of Leaves"),
  list(name = "Flowers", label = "Number of Flowers"),
  list(name = "Buds", label = "Number of Buds"),
  list(name = "Fruit", label = "Number of Fruits"),
  list(name = "leaf_length", label = "Leaf Length"),
  list(name = "flower_length", label = "Flower Length"),
  list(name = "fruit_length", label = "Fruit Length")
)

# Perform comparisons for all variables
# Use tryCatch to diagnose any issues
results <- list()
for(i in 1:length(variables)) {
  v <- variables[[i]]
  cat("Processing variable:", v$name, "\n")
  result <- tryCatch({
    compare_variable(plant_data, v$name, v$label)
  }, error = function(e) {
    cat("Error for variable", v$name, ":", e$message, "\n")
    # Return a placeholder data frame with the same structure
    data.frame(
      Variable = v$label,
      Mean_Pt_Conception = NA,
      SD_Pt_Conception = NA,
      Mean_CojoHQ = NA,
      SD_CojoHQ = NA,
      SampleSize_Pt_Conception = NA,
      SampleSize_CojoHQ = NA,
      Test = paste("Error:", e$message),
      Normality = NA,
      EqualVariances = NA,
      p_value = NA,
      Significant = NA,
      Interpretation = "Error in analysis"
    )
  })
  results[[i]] <- result
}

# Combine all results into a single data frame
results <- do.call(rbind, results)

# Display results in a nice table
results %>%
  select(Variable, Mean_Pt_Conception, SD_Pt_Conception, Mean_CojoHQ, SD_CojoHQ, 
         Test, p_value, Significant, Interpretation) %>%
  kable() %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

## Detailed Analysis by Trait

Let's look at each trait in more detail:

### Number of Leaves

```{r leaves-analysis}
# Extract data for this variable
leaves_data <- plant_data %>%
  select(Population, Leaves)

# Visualize with histogram by population
ggplot(leaves_data, aes(x = Leaves, fill = Population)) +
  geom_histogram(position = "dodge", bins = 10, alpha = 0.7) +
  theme_minimal() +
  labs(title = "Distribution of Leaf Count by Population",
       x = "Number of Leaves",
       y = "Frequency") +
  scale_fill_brewer(palette = "Set2")

# Perform statistical test
leaves_result <- compare_variable(plant_data, "Leaves", "Number of Leaves")

# Display detailed result
leaves_result %>%
  kable() %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

### Number of Buds

```{r buds-analysis}
# Extract data for this variable
buds_data <- plant_data %>%
  select(Population, Buds)

# Visualize with histogram by population
ggplot(buds_data, aes(x = Buds, fill = Population)) +
  geom_histogram(position = "dodge", bins = 8, alpha = 0.7) +
  theme_minimal() +
  labs(title = "Distribution of Bud Count by Population",
       x = "Number of Buds",
       y = "Frequency") +
  scale_fill_brewer(palette = "Set2")

# Perform statistical test
buds_result <- compare_variable(plant_data, "Buds", "Number of Buds")

# Display detailed result
buds_result %>%
  kable() %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

### Leaf Length

```{r leaf-length-analysis}
# Extract data for this variable
leaf_length_data <- plant_data %>%
  select(Population, leaf_length)

# Q-Q plots to check normality
ggplot(leaf_length_data, aes(sample = leaf_length)) +
  geom_qq() +
  geom_qq_line() +
  facet_wrap(~ Population) +
  theme_minimal() +
  labs(title = "Q-Q Plots for Leaf Length by Population")

# Visualize with boxplot and jittered points
ggplot(leaf_length_data, aes(x = Population, y = leaf_length, fill = Population)) +
  geom_boxplot(alpha = 0.7) +
  geom_jitter(width = 0.2, alpha = 0.5) +
  theme_minimal() +
  labs(title = "Comparison of Leaf Length between Populations",
       y = "Leaf Length (mm)",
       x = "Population") +
  scale_fill_brewer(palette = "Set2")

# Perform statistical test
leaf_length_result <- compare_variable(plant_data, "leaf_length", "Leaf Length")

# Display detailed result
leaf_length_result %>%
  kable() %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

### Flower Length

```{r flower-length-analysis}
# Extract data for this variable and remove NA values
flower_length_data <- plant_data %>%
  select(Population, flower_length) %>%
  filter(!is.na(flower_length))

# Visualize with boxplot and jittered points
ggplot(flower_length_data, aes(x = Population, y = flower_length, fill = Population)) +
  geom_boxplot(alpha = 0.7) +
  geom_jitter(width = 0.2, alpha = 0.5) +
  theme_minimal() +
  labs(title = "Comparison of Flower Length between Populations",
       y = "Flower Length (mm)",
       x = "Population") +
  scale_fill_brewer(palette = "Set2")

# Perform statistical test
flower_length_result <- compare_variable(plant_data, "flower_length", "Flower Length")

# Display detailed result
flower_length_result %>%
  kable() %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

## Discussion and Interpretation

Let's summarize our findings and interpretations for each trait:

```{r summary-table}
# Create a cleaner summary table
summary_table <- results %>%
  select(Variable, Mean_Pt_Conception, SD_Pt_Conception, Mean_CojoHQ, SD_CojoHQ, 
         p_value, Significant, Interpretation)

# Display the summary table
summary_table %>%
  kable(caption = "Summary of Population Comparisons") %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

## Statistical Methods Justification

In this analysis, I chose a systematic approach to comparing populations for each trait:

1. **Test Selection Rationale**:
   - For each trait, I first tested for normality using the Shapiro-Wilk test
   - Then tested for equal variances using Levene's test
   - Based on these results, I selected the appropriate statistical test:
     - Normal data with equal variances → Standard two-sample t-test
     - Normal data with unequal variances → Welch's t-test
     - Non-normal data → Wilcoxon rank-sum test (non-parametric)
     - By using the Wilcoxon test with `exact=FALSE`, we properly handle ties in the data

2. **Handling Missing Data**:
   - For traits with substantial missing data (flower_length, fruit_length), we filtered out NA values before analysis
   - We reported sample sizes for each test to ensure transparency about available data



## Conclusion

This analysis provides a comprehensive comparison of two plant populations (Pt_Conception and CojoHQ) across various morphological traits. The systematic approach to statistical testing allows for appropriate comparisons while accounting for the specific characteristics of each trait's distribution.

The most notable differences between the populations appear to be in flower number and flower length. These findings suggest potential ecological, genetic, or environmental factors influencing population differences that may warrant further investigation.